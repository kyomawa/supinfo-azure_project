// ================================================= Configuration ==================================================

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ================================================= Models ==========================================================

// ------------------------------------------------- AUTHENTICATION --------------------------------------------------

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// ------------------------------------------------- OTHER --------------------------------------------------

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  username      String     @unique
  bio           String?
  visibility    Visibility @default(PUBLIC)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  sessions      Session[]
  accounts      Account[]
  posts         Post[]
  follows       Follow[]       @relation("UserFollows")
  followedBy    Follow[]       @relation("UserFollowedBy")
  likes         Like[]
  comments      Comment[]
  notifications Notification[] @relation("UserNotifications")
  actions       Notification[] @relation("ActorNotifications")
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  mediaUrl    String
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator   User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String    @db.ObjectId
  likes     Like[]
  comments  Comment[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model Follow {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  follower    User   @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String @db.ObjectId
  following   User   @relation("UserFollowedBy", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @db.ObjectId

  @@unique([followerId, followingId])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade) // Utilisateur qui a reçu la notification
  userId String @db.ObjectId

  actor   User   @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade) // Utilisateur qui a envoyé la notification
  actorId String @db.ObjectId

  commentId String? @db.ObjectId
}

// ================================================= Enums ==========================================================

enum Visibility {
  PUBLIC
  PRIVATE
  FRIENDS
}
